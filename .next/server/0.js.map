{"version":3,"file":"0.js","sources":["webpack:///./components/Datamaps/DataMaps.js"],"sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\nimport Datamaps from 'datamaps'\n\nconst MAP_CLEARING_PROPS = ['height', 'scope', 'setProjection', 'width']\n\nconst propChangeRequiresMapClear = (oldProps, newProps) => {\n  return MAP_CLEARING_PROPS.some(key => oldProps[key] !== newProps[key])\n}\n\nexport default class Datamap extends React.Component {\n  static propTypes = {\n    arc: PropTypes.array,\n    arcOptions: PropTypes.object,\n    bubbleOptions: PropTypes.object,\n    bubbles: PropTypes.array,\n    data: PropTypes.object,\n    graticule: PropTypes.bool,\n    height: PropTypes.any,\n    labels: PropTypes.bool,\n    responsive: PropTypes.bool,\n    style: PropTypes.object,\n    updateChoroplethOptions: PropTypes.object,\n    width: PropTypes.any\n  }\n\n  constructor(props) {\n    super(props)\n    this.resizeMap = this.resizeMap.bind(this)\n  }\n\n  componentDidMount() {\n    if (this.props.responsive) {\n      window.addEventListener('resize', this.resizeMap)\n    }\n    this.drawMap()\n  }\n\n  componentWillReceiveProps(newProps) {\n    if (propChangeRequiresMapClear(this.props, newProps)) {\n      this.clear()\n    }\n  }\n\n  componentDidUpdate() {\n    this.drawMap()\n  }\n\n  componentWillUnmount() {\n    this.clear()\n    if (this.props.responsive) {\n      window.removeEventListener('resize', this.resizeMap)\n    }\n  }\n\n  clear() {\n    const { container } = this.refs\n\n    for (const child of Array.from(container.childNodes)) {\n      container.removeChild(child)\n    }\n\n    delete this.map\n  }\n\n  drawMap() {\n    const {\n      arc,\n      arcOptions,\n      bubbles,\n      bubbleOptions,\n      data,\n      graticule,\n      labels,\n      updateChoroplethOptions,\n      ...props\n    } = this.props\n\n    let map = this.map\n\n    if (!map) {\n      map = this.map = new Datamaps({\n        ...props,\n        data,\n        element: this.refs.container\n      })\n    } else {\n      map.updateChoropleth(data, updateChoroplethOptions)\n    }\n\n    if (arc) {\n      map.arc(arc, arcOptions)\n    }\n\n    if (bubbles) {\n      map.bubbles(bubbles, bubbleOptions)\n    }\n\n    if (graticule) {\n      map.graticule()\n    }\n\n    if (labels) {\n      map.labels()\n    }\n  }\n\n  resizeMap() {\n    this.map.resize()\n  }\n\n  render() {\n    const style = {\n      height: '100%',\n      position: 'relative',\n      width: '100%',\n      ...this.props.style\n    }\n\n    return <div ref=\"container\" style={style} />\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;AAgBA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAGA;AACA;;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAYA;AACA;AACA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AAHA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;AA9GA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AACA;;;;;A","sourceRoot":""}