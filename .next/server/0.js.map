{"version":3,"file":"0.js","sources":["webpack:///./components/Airline/AirlineDashboard/Cards/AirlineGraphCard.js","webpack:///./components/Airline/AirlineDashboard/Cards/AirlineMapCard.js","webpack:///./components/Airline/AirlineDashboard/Cards/index.js","webpack:///./components/Airline/AirlineDashboard/Layout/AirlineDashboardLayout.js","webpack:///./components/Graph/RouteAirlineBar.js"],"sourcesContent":["import React from 'react'\nimport {\n  Grid,\n  Dropdown,\n  Loader\n} from '../../../../node_modules/semantic-ui-react'\nimport dynamic from 'next/dynamic'\nimport '../Layout/style.css'\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalBarSeries,\n  FlexibleXYPlot,\n  HorizontalGridLines,\n  VerticalGridLines\n} from 'react-vis'\nimport { RouteAirlineBar } from '../../../Graph/RouteAirlineBar'\nvar commaNumber = require('comma-number')\nconst airline = [\n  { key: 1, text: 'THA', value: 'THA' },\n  { key: 2, text: 'BKP', value: 'BKP' },\n  { key: 3, text: 'THD', value: 'THD' }\n]\n\nconst defaultY = [\n  { key: 1, text: 'No. of Route ', value: 'Route' },\n  { key: 2, text: 'Seat', value: 'Seat' },\n  { key: 3, text: 'Pax', value: 'Pax' },\n  // { key: 4, text: 'Load Factor ', value: 'Load Factor' },\n  // { key: 5, text: 'RPK', value: 'RPK' },\n  { key: 6, text: 'Frequency', value: 'Frequency' }\n]\n\nconst DefaultBar = dynamic(() => import('../../../Graph/defaultBar'), {\n  ssr: false\n})\n\n// const RouteAirlineBar = dynamic(\n//   () => import('../../../Graph/RouteAirlineBar'),\n//   {\n//     ssr: false\n//   }\n// )\n\nconst AirlineGraphCard = props => {\n  return (\n    <React.Fragment>\n      <Grid>\n        {/* <Grid.Row textAlign=\"center\">\n          <Grid.Column width={6} />\n          <Grid.Column width={2} verticalAlign=\"middle\">\n            <Dropdown\n              type=\"airline\"\n              defaultValue=\"THA\"\n              options={airline}\n              name=\"airline\"\n              placeholder=\"Airline\"\n              selection\n              fluid\n              onChange={props.handleDropdown}\n            />\n          </Grid.Column>\n          <Grid.Column width={2} verticalAlign=\"middle\">\n            <Dropdown\n              defaultValue=\"Pax\"\n              options={defaultY}\n              name=\"defaultY\"\n              placeholder=\"Yaxis\"\n              selection\n              fluid\n              onChange={props.handleDropdown}\n            />\n          </Grid.Column>\n        </Grid.Row> */}\n        <Grid.Row\n          style={{\n            paddingTop: '0px',\n            paddingLeft: '410px',\n            paddingBottom: '0px'\n          }}\n        >\n          {props.state.showdefault ? (\n            <Grid.Column>\n              <label className=\"header-label\">{props.state.defaultY}</label>\n            </Grid.Column>\n          ) : null}\n        </Grid.Row>\n        <Grid.Row textAlign=\"center\" style={{ paddingBottom: '0px' }}>\n          <Grid.Column\n            style={{\n              display: 'flex',\n              justifyContent: 'center'\n            }}\n          >\n            {props.state.showdefault ? (\n              <DefaultBar\n                type=\"airline\"\n                airline={props.state.airline}\n                getRouteAirline={props.getRouteAirline}\n                handleYear={props.handleYear}\n                data={props.state.defaultGraph}\n                xTitle=\"Year\"\n                yTitle={props.defaultY}\n              />\n            ) : null}\n            {/* <DefaultBar\n              data={props.state.defaultGraph}\n              xTitle=\"Year\"\n              yTitle={props.defaultY}\n            /> */}\n          </Grid.Column>\n        </Grid.Row>\n        {/* {props.state.showdefault ? (\n          <Grid.Row textAlign=\"center\" style={{ paddingTop: '0px' }}>\n            <Grid.Column>\n              <label className=\"text-label\">Year</label>\n            </Grid.Column>\n          </Grid.Row>\n        ) : null} */}\n        {props.state.routestatus ? (\n          <React.Fragment>\n            <Grid.Row textAlign=\"center\">\n              <Grid.Column>\n                <label className=\"header-label\">\n                  {props.state.year} Total routes of {props.state.airline}{' '}\n                  Airline\n                </label>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row style={{ paddingBottom: '0px' }}>\n              <Grid.Column width={3} />\n              <Grid.Column style={{ paddingLeft: '50px' }}>\n                <label className=\"header-label\">Routes</label>\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row columns={3}>\n              <Grid.Column width={3} />\n              <Grid.Column\n                style={{\n                  display: 'flex',\n                  justifyContent: 'center'\n                }}\n                width={9}\n                textAlign=\"right\"\n              >\n                <RouteAirlineBar data={props.state.routeAirlineData} />\n              </Grid.Column>\n              {props.state.otherstatus ? (\n                <Grid.Column\n                  width={2}\n                  textAlign=\"left\"\n                  style={{ paddingLeft: '0px' }}\n                >\n                  <label>Others</label>\n                  <br />\n                  <label>{commaNumber(props.state.other)}</label>\n                </Grid.Column>\n              ) : null}\n            </Grid.Row>\n          </React.Fragment>\n        ) : null}\n      </Grid>\n    </React.Fragment>\n  )\n}\n\nexport { AirlineGraphCard }\n","import React, { Component } from 'react'\nimport dynamic from 'next/dynamic'\nvar randomColor = require('randomcolor')\nconst BubbleMap = dynamic(() => import('../../../Datamaps/DataMaps'), {\n  ssr: false\n})\n\nclass AirlineMapCard extends Component {\n  state = {\n    data: null\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.props.state.mapstatus && this.props.state.routestatus ? (\n          <div style={{ width: '100%', height: '600px', paddingTop: '40px' }}>\n            <BubbleMap\n              scope=\"world\"\n              geographyConfig={{\n                popupOnHover: false,\n                highlightOnHover: false\n              }}\n              fills={{\n                defaultFill: '#abdda4',\n                f1: '#f24d4d',\n                f2: '#f1684d',\n                f3: '#f0d84c',\n                f4: '#85ef4c',\n                f5: '#4cefe6',\n                f6: '#4c61ef',\n                f7: '#954cef',\n                f8: '#ec4cef'\n              }}\n              bubbles={this.props.data}\n              bubbleOptions={{\n                popupTemplate: (geo, data) =>\n                  `<div class=\"hoverinfo\">\n                             <lable>${data.name}</lable><br> \n                             <lable>Results : ${data.result}</lable><br> \n                             <lable>Country : ${data.country}</lable><br> `\n              }}\n            />\n          </div>\n        ) : null}\n      </React.Fragment>\n    )\n  }\n}\n\nexport { AirlineMapCard }\n","export * from './AirlineGraphCard'\nexport * from './AirlineMapCard'\n","import React, { Component } from 'react'\nimport { AirlineGraphCard, AirlineMapCard } from '../Cards'\nimport dynamic from 'next/dynamic'\nimport {\n  Dimmer,\n  Loader,\n  Grid,\n  Dropdown,\n  Menu\n} from '../../../../node_modules/semantic-ui-react'\n\nclass AirlineDashboardLayout extends Component {\n  state = {\n    y2017: null,\n    airline: 'THA',\n    mapyear: '2017',\n    defaultY: 'Pax',\n    data: null,\n    defaultY2017: null,\n    defaultGraphX: ['2013', '2014', '2015', '2016', '2017'],\n    defaultGraphY: [],\n    showdefault: false,\n    defaultGraph: [\n      { x: '2013', y: 0, opacity: 1, color: '#1662cc' },\n      { x: '2014', y: 0, opacity: 1, color: '#1662cc' },\n      { x: '2015', y: 0, opacity: 1, color: '#1662cc' },\n      { x: '2016', y: 0, opacity: 1, color: '#1662cc' },\n      { x: '2017', y: 0, opacity: 1, color: '#1662cc' }\n    ],\n    query: 'Test query',\n    load: true,\n    year: null,\n    routeAirlineData: [\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 },\n      { x: '', y: 0 }\n      // { x: 'Other', y: 0 }\n    ],\n    routestatus: false,\n    routeload: false,\n    bubblemap: [],\n    map: false,\n    mode: true,\n    graph: true,\n    mapload: false,\n    mapstatus: false,\n    type: null,\n    otherstatus: false,\n    other: 0\n  }\n\n  componentDidMount = () => {\n    this.state.type = localStorage.getItem('STATE')\n    this.forceUpdate()\n    this.getPax(this.state.airline)\n    this.getPaxBubbleMap(this.state.mapyear, this.state.airline)\n  }\n\n  handleYear = year => {\n    this.setState({ year: year, mapyear: year })\n    this.setOpacity(this.state.defaultGraph)\n    if (this.state.defaultY === 'Pax') {\n      this.getPaxBubbleMap(year, this.state.airline)\n    } else if (this.state.defaultY === 'Frequency') {\n      this.getFrequencyBubbleMap(year, this.state.airline)\n    } else if (this.state.defaultY === 'Seat') {\n      this.getSeatBubbleMap(year, this.state.airline)\n    }\n\n    this.forceUpdate()\n  }\n\n  activeMode = type => {\n    if (type === 'graph') {\n      this.state.graph = true\n      this.state.map = false\n    } else if (type === 'map') {\n      this.state.map = true\n      this.state.graph = false\n    }\n    this.forceUpdate()\n  }\n\n  handleDropdown = (e, data) => {\n    this.setState({ [data.name]: data.value })\n    this.forceUpdate()\n    if (data.name === 'defaultY') {\n      if (this.state.year === null) {\n        this.filterDefaultGraph(this.state.airline, data.value, this.state.year)\n      } else {\n        this.filterDefaultGraph(\n          this.state.airline,\n          data.value,\n          this.state.mapyear\n        )\n      }\n    }\n    if (data.name === 'airline' && this.state.defaultY !== null) {\n      this.filterDefaultGraph(data.value, this.state.defaultY, this.state.year)\n    }\n    if (data.name === 'year') {\n      this.filterDefaultGraph(\n        this.state.airline,\n        this.state.defaultY,\n        data.value\n      )\n      this.getRouteAirline(data.value, this.state.airline)\n      this.handleYear(data.value)\n    }\n\n    if (data.type === 'airline') {\n      if (this.state.year != null) {\n        this.getRouteAirline(this.state.year, data.value)\n      }\n    }\n  }\n\n  filterDefaultGraph = (airline, status, year) => {\n    console.log(status)\n    this.state.showdefault = true\n    this.state.load = true\n    if (status === 'Pax') {\n      this.getPax(airline)\n      this.getPaxBubbleMap(year, airline)\n    }\n    if (status === 'Frequency') {\n      this.getFrequency(airline)\n      this.getFrequencyBubbleMap(year, airline)\n    }\n\n    if (status === 'Seat') {\n      this.getSeat(airline)\n      this.getSeatBubbleMap(year, airline)\n    }\n\n    if (status === 'Route') {\n      this.getRoute(airline)\n    }\n    this.forceUpdate()\n  }\n\n  getPax = airline => {\n    console.log(this.state.type)\n    console.log('Get Airport!')\n    fetch('http://localhost:4000/getPax', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/plain'\n      },\n      body: JSON.stringify({\n        airport: '%',\n        airline: airline,\n        flight: '%',\n        aircraft: '%',\n        type: this.state.type\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        if (data) {\n          this.loadFinished(data)\n        }\n        this.setDefaultGraphData(data.data)\n        this.forceUpdate()\n      })\n  }\n\n  getFrequency = airline => {\n    fetch('http://localhost:4000/getFrequency', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/plain'\n      },\n      body: JSON.stringify({\n        airport: '%',\n        airline: airline,\n        flight: '%',\n        aircraft: '%',\n        type: this.state.type\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        if (data) {\n          this.loadFinished(data)\n        }\n        this.setDefaultGraphData(data.data)\n        this.forceUpdate()\n      })\n  }\n\n  getSeat = airline => {\n    fetch('http://localhost:4000/getSeat', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/plain'\n      },\n      body: JSON.stringify({\n        airport: '%',\n        airline: airline,\n        flight: '%',\n        aircraft: '%',\n        type: this.state.type\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        if (data) {\n          this.loadFinished(data)\n        }\n        this.setDefaultGraphData(data.data)\n        this.forceUpdate()\n      })\n  }\n\n  getRoute = airline => {\n    fetch('http://localhost:4000/getRoute', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/plain'\n      },\n      body: JSON.stringify({\n        airport: '%',\n        airline: airline,\n        flight: '%',\n        aircraft: '%',\n        type: this.state.type\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        if (data) {\n          this.loadFinished(data)\n        }\n\n        this.setDefaultGraphData(data.data)\n        this.forceUpdate()\n      })\n  }\n\n  getRouteAirline = (year, airline) => {\n    this.setState({ routestatus: false, routeload: true })\n    fetch('http://localhost:4000/getRouteAirline', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/plain'\n      },\n      body: JSON.stringify({\n        year: year,\n        airline: airline,\n        type: this.state.type\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n\n        if (data) {\n          this.setRouteAirlineGraph(data.data)\n          this.setState({ routestatus: true, routeload: false })\n        }\n      })\n  }\n\n  getFrequencyBubbleMap = (year, airline) => {\n    this.setState({ mapstatus: false, mapload: true })\n    console.log('get freq bb')\n    fetch('http://localhost:4000/getFrequencyBubbleMap', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/plain'\n      },\n      body: JSON.stringify({\n        year: year,\n        airline: airline,\n        type: this.state.type\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        if (data) {\n          this.setBubbleMap(data.data)\n          // this.setRouteAirlineGraph(data.data)\n          // this.setState({ routestatus: true, routeload: false })\n          // this.loadFinished(data)\n        }\n\n        // this.setDefaultGraphData(data.data)\n        // this.forceUpdate()\n      })\n  }\n\n  getPaxBubbleMap = (year, airline) => {\n    console.log(this.state.type)\n    console.log('get pax bb')\n    this.setState({ mapstatus: false, mapload: true })\n    fetch('http://localhost:4000/getPaxBubbleMap', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/plain'\n      },\n      body: JSON.stringify({\n        year: year,\n        airline: airline,\n        type: this.state.type\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n\n        // this.setRouteAirlineGraph(data.data)\n        if (data) {\n          this.setBubbleMap(data.data)\n          // this.setRouteAirlineGraph(data.data)\n          // this.setState({ routestatus: true, routeload: false })\n          // this.loadFinished(data)\n        }\n\n        // this.setDefaultGraphData(data.data)\n        // this.forceUpdate()\n      })\n  }\n\n  getSeatBubbleMap = (year, airline) => {\n    console.log('get seat bb')\n    this.setState({ mapstatus: false, mapload: true })\n    fetch('http://localhost:4000/getSeatBubbleMap', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'text/plain'\n      },\n      body: JSON.stringify({\n        year: year,\n        airline: airline,\n        type: this.state.type\n      })\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        // this.setRouteAirlineGraph(data.data)\n        if (data) {\n          this.setBubbleMap(data.data)\n          // this.setRouteAirlineGraph(data.data)\n          // this.setState({ routestatus: true, routeload: false })\n          // this.loadFinished(data)\n        }\n\n        // this.setDefaultGraphData(data.data)\n        // this.forceUpdate()\n      })\n  }\n\n  setBubbleMap = data => {\n    let fill = ['f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8']\n\n    for (let i = 0; i < data.length; i++) {\n      let randomfill = Math.floor(Math.random() * fill.length)\n      let radius\n      if (this.state.type === '5') {\n        radius = (data[i].Results / data[0].Results) * 20\n      } else {\n        radius = (data[i].Results / data[0].Results) * 50\n      }\n      this.state.bubblemap.push({\n        name: data[i].AIRPORT,\n        result: data[i].Results,\n        radius: radius,\n        country: data[i].Name,\n        latitude: data[i].Latitude,\n        longitude: data[i].Longitude,\n        fillKey: fill[randomfill]\n      })\n    }\n    this.setState({ mapstatus: true, mapload: false })\n    this.forceUpdate()\n  }\n\n  loadFinished = () => {\n    this.setState({ load: false })\n    this.forceUpdate\n  }\n\n  setDefaultGraphData = data => {\n    for (let i = 0; i < data.length; i++) {\n      this.state.defaultGraph[i].y = data[i].Results\n\n      console.log(data[i].Results)\n    }\n    this.setState({ showdefault: true })\n  }\n\n  setRouteAirlineGraph = data => {\n    // let sum = 0\n    // for (let i = 0; i < data.length; i++) {\n    //   if (i < 20) {\n    //     this.state.routeAirlineData[i].x = data[i].AIRPORT\n    //     this.state.routeAirlineData[i].y = data[i].Results\n    //   } else {\n    //     sum = sum + data[i].Results\n    //   }\n    // }\n    // this.state.routeAirlineData[20].y = sum\n    this.state.routeAirlineData = []\n    console.log(data.length)\n    let sum = 0\n    if (data.length > 20) {\n      for (let i = 0; i < data.length; i++) {\n        if (i < 20) {\n          this.state.routeAirlineData.push({\n            x: data[i].AIRPORT,\n            y: data[i].Results\n          })\n        } else if (i === 20) {\n          sum = sum + data[i].Results\n          this.state.otherstatus = true\n          // this.state.routeAirlineData.push({ x: 'Other', y: 0 })\n        } else if (i > 20) {\n          sum = sum + data[i].Results\n        }\n      }\n      this.state.other = sum\n      // this.state.routeAirlineData[20].y = sum\n    } else {\n      for (let i = 0; i < data.length; i++) {\n        this.state.routeAirlineData.push({\n          x: data[i].AIRPORT,\n          y: data[i].Results\n        })\n      }\n    }\n    this.forceUpdate()\n  }\n\n  setOpacity = data => {\n    for (let i = 0; i < data.length; i++) {\n      data[i].opacity = 1\n    }\n  }\n\n  inCrosshair = data => {\n    this.state.crosshair = data\n  }\n\n  leaveCrosshair = () => {\n    this.setState({ crosshair: null })\n  }\n\n  render() {\n    console.log(this.state.type)\n    const airline = [\n      { key: 1, text: 'THA', value: 'THA' },\n      { key: 2, text: 'BKP', value: 'BKP' },\n      { key: 3, text: 'THD', value: 'THD' }\n    ]\n\n    const defaultY = [\n      { key: 1, text: 'No. of Route ', value: 'Route' },\n      { key: 2, text: 'Seat', value: 'Seat' },\n      { key: 3, text: 'Pax', value: 'Pax' },\n      // { key: 4, text: 'Load Factor ', value: 'Load Factor' },\n      // { key: 5, text: 'RPK', value: 'RPK' },\n      { key: 6, text: 'Frequency', value: 'Frequency' }\n    ]\n\n    const defaultYM = [\n      { key: 1, text: 'Seat', value: 'Seat' },\n      { key: 2, text: 'Pax', value: 'Pax' },\n      { key: 3, text: 'Frequency', value: 'Frequency' }\n    ]\n\n    const year = [\n      { key: 1, text: '2013', value: '2013' },\n      { key: 2, text: '2014', value: '2014' },\n      { key: 3, text: '2015', value: '2015' },\n      { key: 4, text: '2016', value: '2016' },\n      { key: 5, text: '2017', value: '2017' }\n    ]\n\n    return (\n      <div className=\"section-dashboard\">\n        <Grid>\n          <Grid.Row\n            columns={2}\n            style={{\n              height: '40px',\n              paddingTop: '35px',\n              paddingBottom: '40px'\n            }}\n          >\n            <Grid.Column\n              width={8}\n              textAlign=\"right\"\n              style={{ borderRight: '2px solid grey' }}\n            >\n              <label>\n                <a\n                  className={\n                    this.state.graph ? 'mode-header-active' : 'mode-header'\n                  }\n                  onClick={() => this.activeMode('graph')}\n                >\n                  Graph\n                </a>\n              </label>\n            </Grid.Column>\n            <Grid.Column width={8} textAlign=\"left\">\n              <label>\n                <a\n                  className={\n                    this.state.map ? 'mode-header-active' : 'mode-header'\n                  }\n                  onClick={() => this.activeMode('map')}\n                >\n                  Map\n                </a>\n              </label>\n            </Grid.Column>\n          </Grid.Row>\n          <Grid.Row textAlign=\"center\">\n            {this.state.graph ? (\n              <Grid.Column width={6} />\n            ) : (\n              <Grid.Column width={5} />\n            )}\n            {this.state.map ? (\n              <Grid.Column width={2} verticalAlign=\"middle\">\n                <Dropdown\n                  // defaultValue=\"2017\"\n                  value={this.state.mapyear}\n                  options={year}\n                  name=\"year\"\n                  placeholder=\"Year\"\n                  selection\n                  fluid\n                  onChange={this.handleDropdown}\n                />\n              </Grid.Column>\n            ) : null}\n            <Grid.Column width={2} verticalAlign=\"middle\">\n              <Dropdown\n                type=\"airline\"\n                defaultValue=\"THA\"\n                options={airline}\n                name=\"airline\"\n                placeholder=\"Airline\"\n                selection\n                fluid\n                onChange={this.handleDropdown}\n              />\n            </Grid.Column>\n            <Grid.Column width={2} verticalAlign=\"middle\">\n              <Dropdown\n                defaultValue=\"Pax\"\n                options={this.state.mapstatus ? defaultYM : defaultY}\n                name=\"defaultY\"\n                placeholder=\"Yaxis\"\n                selection\n                fluid\n                onChange={this.handleDropdown}\n              />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n        {this.state.graph ? (\n          <AirlineGraphCard\n            handleDropdown={this.handleDropdown}\n            handleYear={this.handleYear}\n            getRouteAirline={this.getRouteAirline}\n            state={this.state}\n          />\n        ) : null}\n\n        {this.state.map ? (\n          <AirlineMapCard state={this.state} data={this.state.bubblemap} />\n        ) : null}\n\n        <Dimmer active={this.state.load}>\n          <Loader size=\"big\">Preparing Data</Loader>\n        </Dimmer>\n        {this.state.load ? null : (\n          <Dimmer active={this.state.routeload}>\n            <Loader size=\"big\">Get Route!</Loader>\n          </Dimmer>\n        )}\n        {this.state.load === true || this.state.routeload === true ? null : (\n          <Dimmer active={this.state.mapload}>\n            <Loader size=\"big\">Get Map!</Loader>\n          </Dimmer>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default AirlineDashboardLayout\n","import React, { Component } from 'react'\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalBarSeries,\n  FlexibleXYPlot,\n  HorizontalGridLines,\n  VerticalGridLines,\n  Crosshair\n} from 'react-vis'\nvar commaNumber = require('comma-number')\n\nclass RouteAirlineBar extends Component {\n  state = {\n    crosshairValues: null\n  }\n\n  render() {\n    return (\n      <XYPlot\n        height={500}\n        width={900}\n        margin={{ left: 80, top: 10, bottom: 40 }}\n        xType=\"ordinal\"\n        onMouseLeave={() =>\n          this.setState({ selectedPointId: null, crosshairValues: null })\n        }\n      >\n        <VerticalGridLines />\n        <HorizontalGridLines />\n        <XAxis\n          style={{\n            text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600 },\n            ticks: { stroke: '#ADDDE1' }\n          }}\n          position=\"middle\"\n        />\n        <YAxis />\n        <VerticalBarSeries\n          color={this.props.type === 'airport' ? '#15a1cc' : '#28c1b2'}\n          data={this.props.data}\n          onNearestX={(value, { index }) =>\n            this.setState({\n              selectedPointId: index,\n              crosshairValues: [value]\n            })\n          }\n        />\n        {this.state.crosshairValues && (\n          <Crosshair values={this.state.crosshairValues}>\n            <div\n              style={{\n                width: '90px',\n                color: 'white',\n                fontSize: '14px',\n                fontWeight: 'bold',\n                backgroundColor: 'black',\n                borderRadius: '10px',\n                textAlign: 'center'\n              }}\n            >\n              <p>X: {this.state.crosshairValues[0].x}</p>\n              <p>Y: {commaNumber(this.state.crosshairValues[0].y)}</p>\n            </div>\n          </Crosshair>\n        )}\n      </XYPlot>\n    )\n  }\n}\n\n// const RouteAirlineBar = props => {\n//   return (\n\n//   )\n// }\n\nexport { RouteAirlineBar }\n"],"mappings":"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AACA;AACA;AArDA;AACA;AAucA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AANA;AAcA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AANA;AAcA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AANA;AAcA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AANA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AANA;AAYA;AAAA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AANA;AAYA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AANA;AAYA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AApmBA;AACA;AAsmBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClnBA;AACA;AACA;AASA;AACA;AACA;;;;;;;;;;;;;;;;;;AACA;AACA;AADA;AACA;;;;;;AAGA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AADA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAIA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAFA;AADA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;;;;AAxDA;AA4DA;AAEA;AACA;AACA;AACA;;;;;A","sourceRoot":""}